import{T as G,l as w,m as g,n as U,f as c,C as b,o as l,p as V,s as q,N as v,t as W,u as S,K as P,v as O,w as $,x as Q,F as E,y as B,z as j,P as z,E as Z,D as Y,G as L,I as J,J as h,M as X,R as tt,O as f,i as D,Q as et,S as nt,U as at,V as F,X as st,Y as rt,Z as it,$ as ot,a0 as C}from"./index-C6xeY8Bt.js";import{ac as It,ad as xt,ae as vt,af as Pt,ag as Ct,ah as Dt,ai as Nt,aj as Ht,ak as Ft,al as Et,a4 as Bt,a5 as Rt,a6 as Kt,a3 as Mt,a1 as qt,am as Wt,an as jt,ao as zt,ap as Lt,aq as Qt,ar as Gt,as as Ut,at as Vt,au as Ot,av as $t,aw as Zt,ax as Yt,ay as Jt,az as Xt,aA as te,aB as ee,aC as ne,a2 as ae,aE as se,aF as re,aD as ie,aG as oe,aH as ce,aI as ue,aJ as le,aK as he,aL as de,aM as fe,aN as me,aO as _e,bE as ge,a7 as be,aP as ye,aa as we,L as Te,aQ as Ae,aR as ke,aS as Se,aT as pe,aU as Ie,ab as xe,aV as ve,aW as Pe,bG as Ce,aX as De,aY as Ne,bH as He,a8 as Fe,a9 as Ee,aZ as Be,a_ as Re,a$ as Ke,b0 as Me,b1 as qe,b2 as We,b3 as je,b4 as ze,bF as Le,b5 as Qe,b6 as Ge,b7 as Ue,b8 as Ve,b9 as Oe,ba as $e,bb as Ze,bc as Ye,bd as Je,be as Xe,bf as tn,bg as en,bh as nn,bi as an,bj as sn,bk as rn,bl as on,bm as cn,bn as un,bo as ln,bp as hn,bq as dn,br as fn,bs as mn,bt as _n,bu as gn,bv as bn,bw as yn,bx as wn,by as Tn,bz as An,bA as kn,bB as Sn,j as pn,bC as In,bD as xn}from"./index-C6xeY8Bt.js";import{S as ct}from"./index-D12CC9t-.js";class mt extends G{constructor(t={}){super(),this._hbarAllowances=t.hbarAllowances!=null?t.hbarAllowances:[],this._tokenAllowances=t.tokenAllowances!=null?t.tokenAllowances:[],this._nftAllowances=t.nftAllowances!=null?t.nftAllowances:[]}get hbarAllowances(){return this._hbarAllowances}addHbarAllowance(t,e){const n=e instanceof w?e:new w(e);return this._adjustHbarAllowance(null,t,g(n))}_adjustHbarAllowance(t,e,n){return this._requireNotFrozen(),this._hbarAllowances.push(new U({spenderAccountId:typeof e=="string"?c.fromString(e):e instanceof b?c.fromEvmAddress(0,0,e.toSolidityAddress()):e,ownerAccountId:typeof t=="string"?c.fromString(t):t instanceof b?c.fromEvmAddress(0,0,t.toSolidityAddress()):t,amount:n})),this}grantHbarAllowance(t,e,n){const a=n instanceof w?n:new w(n);return this._adjustHbarAllowance(t,e,g(a))}revokeHbarAllowance(t,e,n){const a=n instanceof w?n:new w(n);return this._adjustHbarAllowance(t,e,g(a).negated())}get tokenAllowances(){return this._tokenAllowances}addTokenAllowance(t,e,n){return this._adjustTokenAllowance(t,null,e,g(l.fromValue(n)))}_adjustTokenAllowance(t,e,n,a){return this._requireNotFrozen(),this._tokenAllowances.push(new V({tokenId:typeof t=="string"?q.fromString(t):t,spenderAccountId:typeof n=="string"?c.fromString(n):n instanceof b?c.fromEvmAddress(0,0,n.toSolidityAddress()):n,ownerAccountId:typeof e=="string"?c.fromString(e):e instanceof b?c.fromEvmAddress(0,0,e.toSolidityAddress()):e,amount:typeof a=="number"?l.fromNumber(a):a})),this}grantTokenAllowance(t,e,n,a){return this._adjustTokenAllowance(t,e,n,g(l.fromValue(a)))}revokeTokenAllowance(t,e,n,a){return this._adjustTokenAllowance(t,e,n,g(l.fromValue(a)))}addTokenNftAllowance(t,e){const n=typeof t=="string"?v.fromString(t):t;return this._adjustTokenNftAllowance(n,null,e)}_adjustTokenNftAllowance(t,e,n){this._requireNotFrozen();const a=typeof n=="string"?c.fromString(n):n instanceof b?c.fromEvmAddress(0,0,n.toSolidityAddress()):n,s=typeof e=="string"?c.fromString(e):e instanceof b?c.fromEvmAddress(0,0,e.toSolidityAddress()):e;let o=!1;for(const r of this._nftAllowances)if(r.tokenId.compare(t.tokenId)===0&&r.spenderAccountId!=null&&r.spenderAccountId.compare(a)===0){r.serialNumbers!=null&&r.serialNumbers.push(t.serial),o=!0;break}return o||this._nftAllowances.push(new W({tokenId:t.tokenId,spenderAccountId:a,serialNumbers:[t.serial],ownerAccountId:s,allSerials:!1,delegatingSpender:null})),this}grantTokenNftAllowance(t,e,n){const a=typeof t=="string"?v.fromString(t):t;return g(a.serial),this._adjustTokenNftAllowance(a,e,n)}revokeTokenNftAllowance(t,e,n){const a=typeof t=="string"?v.fromString(t):t;return g(a.serial),this._adjustTokenNftAllowance(new v(a.tokenId,a.serial.negate()),e,n)}addAllTokenNftAllowance(t,e){return this._adjustTokenNftAllowanceAllSerials(t,null,e,!0)}grantTokenNftAllowanceAllSerials(t,e,n){return this._adjustTokenNftAllowanceAllSerials(t,e,n,!0)}revokeTokenNftAllowanceAllSerials(t,e,n){return this._adjustTokenNftAllowanceAllSerials(t,e,n,!1)}_adjustTokenNftAllowanceAllSerials(t,e,n,a){return this._requireNotFrozen(),this._nftAllowances.push(new W({tokenId:typeof t=="string"?q.fromString(t):t,ownerAccountId:e!=null?typeof e=="string"?c.fromString(e):e instanceof b?c.fromEvmAddress(0,0,e.toSolidityAddress()):e:null,spenderAccountId:typeof n=="string"?c.fromString(n):n instanceof b?c.fromEvmAddress(0,0,n.toSolidityAddress()):n,serialNumbers:null,allSerials:a,delegatingSpender:null})),this}_validateChecksums(t){this._hbarAllowances.map(e=>e._validateChecksums(t)),this._tokenAllowances.map(e=>e._validateChecksums(t)),this._nftAllowances.map(e=>e._validateChecksums(t))}_execute(t,e){return Promise.reject(new Error("This feature has been deprecated for this class."))}_getTransactionDataCase(){throw new Error("This feature has been deprecated for this class.")}_makeTransactionData(){throw new Error("This feature has been deprecated.")}_getLogId(){return`AccountAllowanceAdjustTransaction:${this._transactionIds.current.validStart.toString()}`}}class _t{static async verifySignature(t,e,n,a){const s=await new S().setAccountId(e).execute(t);return s.key instanceof P?!1:s.key.verify(n,a)}static async verifyTransaction(t,e,n){const a=await new S().setAccountId(e).execute(t);return a.key instanceof P?!1:a.key.verifyTransaction(n)}static async verifySignatureWithSigner(t,e,n,a){const s=await new S().setAccountId(e).executeWithSigner(t);return s.key instanceof P?!1:s.key.verify(n,a)}static async verifyTransactionWithSigner(t,e,n){const a=await new S().setAccountId(e).executeWithSigner(t);return a.key instanceof P?!1:a.key.verifyTransaction(n)}}class gt{constructor(){this._bytecode=null,this._contractCreate=new O,this._signerPublicKeys=new Set,this._publicKeys=[],this._transactionSigners=[],this._maxChunks=null}get maxChunks(){return this._maxChunks}setMaxChunks(t){return this._maxChunks=t,this}get bytecode(){return this._bytecode}setBytecode(t){return this._bytecode=t instanceof Uint8Array?t:$(t),this}get adminKey(){return this._contractCreate.adminKey}setAdminKey(t){return this._contractCreate.setAdminKey(t),this}get gas(){return this._contractCreate.gas}setGas(t){return this._contractCreate.setGas(t),this}get initialBalance(){return this._contractCreate.initialBalance}setInitialBalance(t){return this._contractCreate.setInitialBalance(t),this}get proxyAccountId(){return this._contractCreate.proxyAccountId}setProxyAccountId(t){return this._contractCreate.setProxyAccountId(t),this}get autoRenewPeriod(){return this._contractCreate.autoRenewPeriod}setAutoRenewPeriod(t){return this._contractCreate.setAutoRenewPeriod(t),this}get constructorParameters(){return this._contractCreate.constructorParameters}setConstructorParameters(t){return this._contractCreate.setConstructorParameters(t),this}get contractMemo(){return this._contractCreate.contractMemo}setContractMemo(t){return this._contractCreate.setContractMemo(t),this}get maxAutomaticTokenAssociation(){return this._contractCreate.maxAutomaticTokenAssociations}setMaxAutomaticTokenAssociations(t){return this._contractCreate.setMaxAutomaticTokenAssociations(t),this}get stakedAccountId(){return this._contractCreate.stakedAccountId}setStakedAccountId(t){return this._contractCreate.setStakedAccountId(t),this}get stakedNodeId(){return this._contractCreate.stakedNodeId}setStakedNodeId(t){return this._contractCreate.setStakedNodeId(t),this}get declineStakingRewards(){return this._contractCreate.declineStakingRewards}setDeclineStakingReward(t){return this._contractCreate.setDeclineStakingReward(t),this}get autoRenewAccountId(){return this._contractCreate.autoRenewAccountId}setAutoRenewAccountId(t){return this._contractCreate.setAutoRenewAccountId(t),this}sign(t){return this.signWith(t.publicKey,e=>Promise.resolve(t.sign(e)))}signWith(t,e){const n=t.toBytesRaw(),a=Q(n);return this._signerPublicKeys.has(a)?this:(this._publicKeys.push(t),this._transactionSigners.push(e),this)}async execute(t,e){if(this._bytecode==null)throw new Error("cannot create contract with no bytecode");const n=t.operatorPublicKey,a=new E().setKeys(n!=null?[n]:[]).setContents(this._bytecode.subarray(0,Math.min(this._bytecode.length,2048))).freezeWith(t);await y(a,this._publicKeys,this._transactionSigners);let s=await a.execute(t,e);const r=(await s.getReceipt(t)).fileId;if(this._bytecode.length>2048){const i=new B().setFileId(r).setContents(this._bytecode.subarray(2048)).freezeWith(t);await y(i,this._publicKeys,this._transactionSigners),await i.execute(t,e)}if(this._contractCreate.setBytecodeFileId(r).freezeWith(t),await y(this._contractCreate,this._publicKeys,this._transactionSigners),s=await this._contractCreate.execute(t,e),await s.getReceipt(t),n!=null){const i=new j().setFileId(r).freezeWith(t);await y(i,this._publicKeys,this._transactionSigners),await(await i.execute(t,e)).getReceipt(t)}return s}async executeWithSigner(t){if(this._bytecode==null)throw new Error("cannot create contract with no bytecode");if(t.getAccountKey==null)throw new Error("`Signer.getAccountKey()` is not implemented, but is required for `ContractCreateFlow`");const e=await t.getAccountKey();let n;if(e instanceof z)n=e;else{const i=Object.values(e._key._key._keyData),T=new Uint8Array(i);n=z.fromBytes(T)}const a=await new E().setKeys(n!=null?[n]:[]).setContents(this._bytecode.subarray(0,Math.min(this._bytecode.length,2048))).freezeWithSigner(t);await a.signWithSigner(t),await y(a,this._publicKeys,this._transactionSigners);let s=await a.executeWithSigner(t);const r=(await s.getReceiptWithSigner(t)).fileId;if(this._bytecode.length>2048){let i=new B().setFileId(r).setContents(this._bytecode.subarray(2048));this._maxChunks!=null&&i.setMaxChunks(this._maxChunks),i=await i.freezeWithSigner(t),await i.signWithSigner(t),await y(i,this._publicKeys,this._transactionSigners),await i.executeWithSigner(t)}if(this._contractCreate=await this._contractCreate.setBytecodeFileId(r).freezeWithSigner(t),this._contractCreate=await this._contractCreate.signWithSigner(t),await y(this._contractCreate,this._publicKeys,this._transactionSigners),s=await this._contractCreate.executeWithSigner(t),await s.getReceiptWithSigner(t),e!=null){const i=await new j().setFileId(r).freezeWithSigner(t);await i.signWithSigner(t),await y(i,this._publicKeys,this._transactionSigners),await(await i.executeWithSigner(t)).getReceiptWithSigner(t)}return s}}async function y(d,t,e){for(let n=0;n<t.length;n++)await d.signWith(t[n],e[n])}class bt{constructor(t={}){this._ethereumData=null,this._callDataFileId=null,this._maxGasAllowance=null,t.ethereumData!=null&&this.setEthereumData(t.ethereumData),t.maxGasAllowance!=null&&this.setMaxGasAllowanceHbar(t.maxGasAllowance),this._maxChunks=null}get maxChunks(){return this._maxChunks}setMaxChunks(t){return this._maxChunks=t,this}get ethereumData(){return this._ethereumData}setEthereumData(t){return this._ethereumData=t instanceof Uint8Array?Z.fromBytes(t):t,this}get maxGasAllowance(){return this._maxGasAllowance}setMaxGasAllowance(t){return this.setMaxGasAllowanceHbar(t)}setMaxGasAllowanceHbar(t){return this._maxGasAllowance=t instanceof w?t:new w(t),this}async execute(t){if(this._ethereumData==null)throw new Error("cannot submit ethereum transaction with no ethereum data");const e=new Y,n=this._ethereumData.toBytes();if(this._maxGasAllowance!=null&&e.setMaxGasAllowanceHbar(this._maxGasAllowance),this._callDataFileId!=null){if(this._ethereumData.callData.length===0)throw new Error("call data file ID provided, but ethereum data already contains call data");e.setEthereumData(n).setCallDataFileId(this._callDataFileId)}else if(n.length<=5120)e.setEthereumData(n);else{const a=await ut(this._ethereumData.callData,t,this._maxChunks);this._ethereumData.callData=new Uint8Array,e.setEthereumData(this._ethereumData.toBytes()).setCallDataFileId(a)}return e.execute(t)}}async function ut(d,t,e){const n=Q(d),a=(await(await new E().setContents(n.substring(0,4096)).setKeys(t.operatorPublicKey?[t.operatorPublicKey]:[]).execute(t)).getReceipt(t)).fileId;if(d.length>4096){let s=new B().setFileId(a).setContents(n.substring(4096,n.length));e!=null&&s.setMaxChunks(e),await(await s.execute(t)).getReceipt(t)}return a}const{proto:lt}=J;class R{constructor(t){this.currentRate=t.currentRate,this.nextRate=t.nextRate,Object.freeze(this)}static _fromProtobuf(t){return new R({currentRate:L._fromProtobuf(t.currentRate),nextRate:L._fromProtobuf(t.nextRate)})}_toProtobuf(){return{currentRate:this.currentRate._toProtobuf(),nextRate:this.nextRate._toProtobuf()}}static fromBytes(t){return R._fromProtobuf(lt.ExchangeRateSet.decode(t))}}class k{constructor(t={}){this.min=t.min,this.max=t.max,this.constant=t.constant,this.transactionBandwidthByte=t.transactionBandwidthByte,this.transactionVerification=t.transactionVerification,this.transactionRamByteHour=t.transactionRamByteHour,this.transactionStorageByteHour=t.transactionStorageByteHour,this.contractTransactionGas=t.contractTransactionGas,this.transferVolumeHbar=t.transferVolumeHbar,this.responseMemoryByte=t.responseMemoryByte,this.responseDiskByte=t.responseDiskByte}static fromBytes(t){return k._fromProtobuf(h.proto.FeeComponents.decode(t))}static _fromProtobuf(t){return new k({min:t.min!=null?t.min:void 0,max:t.max!=null?t.max:void 0,constant:t.constant!=null?t.constant:void 0,transactionBandwidthByte:t.bpt!=null?t.bpt:void 0,transactionVerification:t.vpt!=null?t.vpt:void 0,transactionRamByteHour:t.rbh!=null?t.rbh:void 0,transactionStorageByteHour:t.sbh!=null?t.sbh:void 0,contractTransactionGas:t.gas!=null?t.gas:void 0,transferVolumeHbar:t.tv!=null?t.tv:void 0,responseMemoryByte:t.bpr!=null?t.bpr:void 0,responseDiskByte:t.sbpr!=null?t.sbpr:void 0})}_toProtobuf(){return{min:this.min!=null?this.min:void 0,max:this.max!=null?this.max:void 0,constant:this.constant!=null?this.constant:void 0,bpt:this.transactionBandwidthByte!=null?this.transactionBandwidthByte:void 0,vpt:this.transactionVerification!=null?this.transactionVerification:void 0,rbh:this.transactionRamByteHour!=null?this.transactionRamByteHour:void 0,sbh:this.transactionStorageByteHour!=null?this.transactionStorageByteHour:void 0,gas:this.contractTransactionGas!=null?this.contractTransactionGas:void 0,tv:this.transferVolumeHbar!=null?this.transferVolumeHbar:void 0,bpr:this.responseMemoryByte!=null?this.responseMemoryByte:void 0,sbpr:this.responseDiskByte!=null?this.responseDiskByte:void 0}}toBytes(){return h.proto.FeeComponents.encode(this._toProtobuf()).finish()}}class p{constructor(t={}){this.nodedata=t.nodedata,this.networkdata=t.networkdata,this.servicedata=t.servicedata,this.feeDataType=t.feeDataType}static fromBytes(t){return p._fromProtobuf(h.proto.FeeData.decode(t))}static _fromProtobuf(t){return new p({nodedata:t.nodedata!=null?k._fromProtobuf(t.nodedata):void 0,networkdata:t.networkdata!=null?k._fromProtobuf(t.networkdata):void 0,servicedata:t.servicedata!=null?k._fromProtobuf(t.servicedata):void 0,feeDataType:t.subType!=null?X._fromCode(t.subType):void 0})}_toProtobuf(){return{nodedata:this.nodedata!=null?this.nodedata._toProtobuf():void 0,networkdata:this.networkdata!=null?this.networkdata._toProtobuf():void 0,servicedata:this.servicedata!=null?this.servicedata._toProtobuf():void 0,subType:this.feeDataType!=null?this.feeDataType.valueOf():void 0}}toBytes(){return h.proto.FeeData.encode(this._toProtobuf()).finish()}}class N{constructor(t={}){this.hederaFunctionality=t.hederaFunctionality,this.feeData=t.feeData,this.fees=t.fees}static fromBytes(t){return N._fromProtobuf(h.proto.TransactionFeeSchedule.decode(t))}static _fromProtobuf(t){return new N({hederaFunctionality:t.hederaFunctionality!=null?tt._fromCode(t.hederaFunctionality):void 0,feeData:t.feeData!=null?p._fromProtobuf(t.feeData):void 0,fees:t.fees!=null?t.fees.map(e=>p._fromProtobuf(e)):void 0})}_toProtobuf(){return{hederaFunctionality:this.hederaFunctionality!=null?this.hederaFunctionality.valueOf():void 0,feeData:this.feeData!=null?this.feeData._toProtobuf():void 0,fees:this.fees!=null?this.fees.map(t=>t._toProtobuf()):void 0}}toBytes(){return h.proto.TransactionFeeSchedule.encode(this._toProtobuf()).finish()}}class I{constructor(t={}){this.transactionFeeSchedule=t.transactionFeeSchedule,this.expirationTime=t.expirationTime}static fromBytes(t){return I._fromProtobuf(h.proto.FeeSchedule.decode(t))}static _fromProtobuf(t){return new I({transactionFeeSchedule:t.transactionFeeSchedule!=null?t.transactionFeeSchedule.map(e=>N._fromProtobuf(e)):void 0,expirationTime:t.expiryTime!=null?f._fromProtobuf(t.expiryTime):void 0})}_toProtobuf(){return{transactionFeeSchedule:this.transactionFeeSchedule!=null?this.transactionFeeSchedule.map(t=>t._toProtobuf()):void 0,expiryTime:this.expirationTime!=null?this.expirationTime._toProtobuf():void 0}}toBytes(){return h.proto.FeeSchedule.encode(this._toProtobuf()).finish()}}class K{constructor(t={}){this.current=t.currentFeeSchedule,this.next=t.nextFeeSchedule}static fromBytes(t){return K._fromProtobuf(h.proto.CurrentAndNextFeeSchedule.decode(t))}static _fromProtobuf(t){return new K({currentFeeSchedule:t.currentFeeSchedule!=null?I._fromProtobuf(t.currentFeeSchedule):void 0,nextFeeSchedule:t.nextFeeSchedule!=null?I._fromProtobuf(t.nextFeeSchedule):void 0})}_toProtobuf(){return{currentFeeSchedule:this.current!=null?this.current._toProtobuf():void 0,nextFeeSchedule:this.next!=null?this.next._toProtobuf():void 0}}toBytes(){return h.proto.CurrentAndNextFeeSchedule.encode(this._toProtobuf()).finish()}}const yt={},wt={};class ht{constructor(){this._call=null}_setCall(t){this._call=t}unsubscribe(){this._call!=null&&this._call()}}class H{constructor(t){this.consensusTimestamp=t.consensusTimestamp,this.contents=t.contents,this.runningHash=t.runningHash,this.sequenceNumber=t.sequenceNumber,Object.freeze(this)}static _fromProtobuf(t){return new H({consensusTimestamp:f._fromProtobuf(t.consensusTimestamp),contents:t.message!=null?t.message:new Uint8Array,runningHash:t.runningHash!=null?t.runningHash:new Uint8Array,sequenceNumber:t.sequenceNumber!=null?t.sequenceNumber instanceof l?t.sequenceNumber:l.fromValue(t.sequenceNumber):l.ZERO})}_toProtobuf(){return{consensusTimestamp:this.consensusTimestamp._toProtobuf(),message:this.contents,runningHash:this.runningHash,sequenceNumber:this.sequenceNumber}}}class x{constructor(t){this.consensusTimestamp=t.consensusTimestamp,this.contents=t.contents,this.runningHash=t.runningHash,this.sequenceNumber=t.sequenceNumber,this.chunks=t.chunks,this.initialTransactionId=t.initialTransactionId,Object.freeze(this)}static _ofSingle(t){return new x({consensusTimestamp:f._fromProtobuf(t.consensusTimestamp),contents:t.message!=null?t.message:new Uint8Array,runningHash:t.runningHash!=null?t.runningHash:new Uint8Array,sequenceNumber:t.sequenceNumber!=null?t.sequenceNumber instanceof l?t.sequenceNumber:l.fromNumber(t.sequenceNumber):l.ZERO,initialTransactionId:t.chunkInfo!=null&&t.chunkInfo.initialTransactionID!=null?D._fromProtobuf(t.chunkInfo.initialTransactionID):null,chunks:[H._fromProtobuf(t)]})}static _ofMany(t){const e=t.length,n=t[e-1],a=f._fromProtobuf(n.consensusTimestamp),s=n.runningHash,o=n.sequenceNumber!=null?n.sequenceNumber instanceof l?n.sequenceNumber:l.fromValue(n.sequenceNumber):l.ZERO;t.sort((u,_)=>(u!=null&&u.chunkInfo!=null&&u.chunkInfo.number!=null?u.chunkInfo.number:0)<(_!=null&&_.chunkInfo!=null&&_.chunkInfo.number!=null?_.chunkInfo.number:0)?-1:1);const r=t.map(u=>H._fromProtobuf(u)),i=r.map(u=>u.contents.length).reduce((u,_)=>u+_,0),T=new Uint8Array(i);let A=0;t.forEach(u=>{T.set(u.message,A),A+=u.message.length});let m=null;return t.length>0&&t[0].chunkInfo!=null&&t[0].chunkInfo.initialTransactionID!=null&&(m=D._fromProtobuf(t[0].chunkInfo.initialTransactionID)),new x({consensusTimestamp:a,contents:T,runningHash:s,sequenceNumber:o,chunks:r,initialTransactionId:m})}}class Tt extends et{constructor(t={}){super(),this._topicId=null,t.topicId!=null&&this.setTopicId(t.topicId),this._startTime=null,t.startTime!=null&&this.setStartTime(t.startTime),this._endTime=null,t.endTime!=null&&this.setEndTime(t.endTime),this._limit=null,t.limit!=null&&this.setLimit(t.limit),this._errorHandler=(e,n)=>{console.error(`Error attempting to subscribe to topic: ${this._topicId!=null?this._topicId.toString():""}`)},t.errorHandler!=null&&(this._errorHandler=t.errorHandler),this._listener=null,this._completionHandler=()=>{this._logger&&this._logger.info(`Subscription to topic ${this._topicId!=null?this._topicId.toString():""} complete`)},t.completionHandler!=null&&(this._completionHandler=t.completionHandler),this._retryHandler=e=>{if(e!=null){if(e instanceof Error)return!0;switch(e.code){case 13:return nt.test(e.details.toString());case 5:case 8:case 14:case 17:return!0;default:return!1}}return!1},t.retryHandler!=null&&(this._retryHandler=t.retryHandler),this._attempt=0,this._handle=null,this.setMaxBackoff(8e3)}get topicId(){return this._topicId}setTopicId(t){return this.requireNotSubscribed(),this._topicId=typeof t=="string"?at.fromString(t):t.clone(),this}get startTime(){return this._startTime}setStartTime(t){return this.requireNotSubscribed(),this._startTime=t instanceof f?t:t instanceof Date?f.fromDate(t):new f(t,0),this}get endTime(){return this._endTime}setEndTime(t){return this.requireNotSubscribed(),this._endTime=t instanceof f?t:t instanceof Date?f.fromDate(t):new f(t,0),this}get limit(){return this._limit}setLimit(t){return this.requireNotSubscribed(),this._limit=t instanceof l?t:l.fromValue(t),this}setErrorHandler(t){return this._errorHandler=t,this}setCompletionHandler(t){return this.requireNotSubscribed(),this._completionHandler=t,this}setMaxAttempts(t){return this.requireNotSubscribed(),this._maxAttempts=t,this}setMaxBackoff(t){return this.requireNotSubscribed(),this._maxBackoff=t,this}subscribe(t,e,n){return this._handle=new ht,this._listener=n,e!=null&&(this._errorHandler=e),this._makeServerStreamRequest(t),this._handle}_makeServerStreamRequest(t){const e=new Map,n=h.com.hedera.mirror.api.proto.ConsensusTopicQuery.encode({topicID:this._topicId!=null?this._topicId._toProtobuf():null,consensusStartTime:this._startTime!=null?this._startTime._toProtobuf():null,consensusEndTime:this._endTime!=null?this._endTime._toProtobuf():null,limit:this._limit}).finish(),a=t._mirrorNetwork.getNextMirrorNode().getChannel().makeServerStreamRequest("ConsensusService","subscribeTopic",n,s=>{const o=h.com.hedera.mirror.api.proto.ConsensusTopicResponse.decode(s);if(this._limit!=null&&this._limit.gt(0)&&(this._limit=this._limit.sub(1)),this._startTime=f._fromProtobuf(o.consensusTimestamp).plusNanos(1),o.chunkInfo==null||o.chunkInfo!=null&&o.chunkInfo.total===1)this._passTopicMessage(x._ofSingle(o));else{const r=o.chunkInfo,i=r.initialTransactionID,T=r.total,A=D._fromProtobuf(i).toString();let m=[];const u=e.get(A);if(u==null?e.set(A,m):m=u,m.push(o),m.length===T){const _=x._ofMany(m);e.delete(A),this._passTopicMessage(_)}}},s=>{const o=s instanceof Error?s.message:s.details;if(this._attempt<this._maxAttempts&&this._retryHandler(s)){const r=Math.min(250*2**this._attempt,this._maxBackoff);console.warn(`Error subscribing to topic ${this._topicId!=null?this._topicId.toString():"UNKNOWN"} during attempt ${this._attempt}. Waiting ${r} ms before next attempt: ${o}`),this._attempt+=1,setTimeout(()=>{this._makeServerStreamRequest(t)},r)}else this._errorHandler(null,new Error(o))},this._completionHandler);this._handle!=null&&this._handle._setCall(()=>a())}requireNotSubscribed(){if(this._handle!=null)throw new Error("Cannot change fields on an already subscribed query")}_passTopicMessage(t){try{if(this._listener!=null)this._listener(t);else throw new Error("(BUG) listener is unexpectedly not set")}catch(e){this._errorHandler(t,e)}}}class M{constructor(t,e,n){const a=typeof e=="string"?F.fromStringDer(e):e;this.publicKey=a.publicKey,this.signer=s=>Promise.resolve(a.sign(s)),this.provider=n,this.accountId=typeof t=="string"?c.fromString(t):t}static createRandomED25519(){const t=F.generateED25519(),n=t.publicKey.toAccountId(0,0);return Promise.resolve(new M(n,t))}static createRandomECDSA(){const t=F.generateECDSA(),n=t.publicKey.toAccountId(0,0);return Promise.resolve(new M(n,t))}getProvider(){return this.provider}getAccountId(){return this.accountId}getAccountKey(){return this.publicKey}getLedgerId(){return this.provider==null?null:this.provider.getLedgerId()}getNetwork(){return this.provider==null?{}:this.provider.getNetwork()}getMirrorNetwork(){return this.provider==null?[]:this.provider.getMirrorNetwork()}async sign(t){const e=[];for(const n of t)e.push(new ct({publicKey:this.publicKey,signature:await this.signer(n),accountId:this.accountId}));return e}getAccountBalance(){return this.call(new st().setAccountId(this.accountId))}getAccountInfo(){return this.call(new S().setAccountId(this.accountId))}getAccountRecords(){return this.call(new rt().setAccountId(this.accountId))}signTransaction(t){return t.signWith(this.publicKey,this.signer)}checkTransaction(t){const e=t.transactionId;if(e!=null&&e.accountId!=null&&e.accountId.compare(this.accountId)!=0)throw new Error("transaction's ID constructed with a different account ID");if(this.provider==null)return Promise.resolve(t);const n=(t.nodeAccountIds!=null?t.nodeAccountIds:[]).map(s=>s.toString()),a=Object.values(this.provider.getNetwork()).map(s=>s.toString());if(!n.reduce((s,o)=>s&&a.includes(o),!0))throw new Error("Transaction already set node account IDs to values not within the current network");return Promise.resolve(t)}populateTransaction(t){if(t._freezeWithAccountId(this.accountId),t.transactionId==null&&t.setTransactionId(D.generate(this.accountId)),t.nodeAccountIds!=null&&t.nodeAccountIds.length!=0)return Promise.resolve(t.freeze());if(this.provider==null)return Promise.resolve(t);const e=Object.values(this.provider.getNetwork()).map(n=>typeof n=="string"?c.fromString(n):n);return it(e),t.setNodeAccountIds(e.slice(0,(e.length+3-1)/3)),Promise.resolve(t.freeze())}call(t){if(this.provider==null)throw new Error("cannot send request with an wallet that doesn't contain a provider");return this.provider.call(t._setOperatorWith(this.accountId,this.publicKey,this.signer))}}class At{constructor(t){this._logger=ot({level:t.toString(),transport:{target:"pino-pretty",options:{translateTime:"SYS:dd-mm-yyyy HH:MM:ss",ignore:"pid,hostname"}}}),this._previousLevel=t}setLogger(t){return this._logger=t,this}setLevel(t){return this._previousLevel=C._fromString(this._logger.level),this._logger.level=t.toString(),this}get level(){return C._fromString(this._logger.level)}get levels(){return this._logger.levels.labels}setSilent(t){return t?this._logger.level=C.Silent.toString():this._logger.level=this._previousLevel.toString(),this}get silent(){return this._logger.level==C.Silent.toString()}trace(t){this._logger.trace(t)}debug(t){this._logger.debug(t)}info(t){this._logger.info(t)}warn(t){this._logger.warn(t)}error(t){this._logger.error(t)}fatal(t){this._logger.fatal(t)}}const kt={Mainnet:"mainnet",Testnet:"testnet",Previewnet:"previewnet"};export{mt as AccountAllowanceAdjustTransaction,It as AccountAllowanceApproveTransaction,xt as AccountAllowanceDeleteTransaction,vt as AccountBalance,st as AccountBalanceQuery,Pt as AccountCreateTransaction,Ct as AccountDeleteTransaction,c as AccountId,Dt as AccountInfo,_t as AccountInfoFlow,S as AccountInfoQuery,rt as AccountRecordsQuery,Nt as AccountStakersQuery,Ht as AccountUpdateTransaction,Ft as AddressBookQuery,Et as AssessedCustomFee,Bt as BadKeyError,Rt as BadMnemonicError,Kt as BadMnemonicReason,Mt as Cache,qt as Client,Wt as ContractByteCodeQuery,jt as ContractCallQuery,gt as ContractCreateFlow,O as ContractCreateTransaction,zt as ContractDeleteTransaction,Lt as ContractExecuteTransaction,Qt as ContractFunctionParameters,Gt as ContractFunctionResult,Ut as ContractFunctionSelector,b as ContractId,Vt as ContractInfo,Ot as ContractInfoQuery,$t as ContractLogInfo,Zt as ContractNonceInfo,Yt as ContractUpdateTransaction,Jt as CustomFee,Xt as CustomFixedFee,te as CustomFractionalFee,ee as CustomRoyaltyFee,ne as DelegateContractId,ae as EntityIdHelper,bt as EthereumFlow,Y as EthereumTransaction,Z as EthereumTransactionData,se as EthereumTransactionDataEip1559,re as EthereumTransactionDataEip2930,ie as EthereumTransactionDataLegacy,oe as EvmAddress,L as ExchangeRate,R as ExchangeRates,ce as Executable,ue as FeeAssessmentMethod,k as FeeComponents,p as FeeData,X as FeeDataType,I as FeeSchedule,K as FeeSchedules,B as FileAppendTransaction,le as FileContentsQuery,E as FileCreateTransaction,j as FileDeleteTransaction,he as FileId,de as FileInfo,fe as FileInfoQuery,me as FileUpdateTransaction,_e as FreezeTransaction,ge as FreezeType,be as HEDERA_PATH,w as Hbar,U as HbarAllowance,ye as HbarUnit,we as Key,P as KeyList,Te as LedgerId,Ae as LiveHash,ke as LiveHashAddTransaction,Se as LiveHashDeleteTransaction,pe as LiveHashQuery,C as LogLevel,At as Logger,l as Long,Ie as MaxQueryPaymentExceeded,xe as Mnemonic,kt as NetworkName,ve as NetworkVersionInfo,Pe as NetworkVersionInfoQuery,v as NftId,Ce as PrecheckStatusError,F as PrivateKey,De as PrngTransaction,yt as Provider,Ne as ProxyStaker,z as PublicKey,et as Query,He as ReceiptStatusError,tt as RequestType,Fe as SLIP44_ECDSA_ETH_PATH,Ee as SLIP44_ECDSA_HEDERA_PATH,Be as ScheduleCreateTransaction,Re as ScheduleDeleteTransaction,Ke as ScheduleId,Me as ScheduleInfo,qe as ScheduleInfoQuery,We as ScheduleSignTransaction,je as SemanticVersion,wt as Signer,ct as SignerSignature,ze as Status,Le as StatusError,ht as SubscriptionHandle,Qe as SystemDeleteTransaction,Ge as SystemUndeleteTransaction,f as Timestamp,V as TokenAllowance,Ue as TokenAssociateTransaction,Ve as TokenBurnTransaction,Oe as TokenCreateTransaction,$e as TokenDeleteTransaction,Ze as TokenDissociateTransaction,Ye as TokenFeeScheduleUpdateTransaction,Je as TokenFreezeTransaction,Xe as TokenGrantKycTransaction,q as TokenId,tn as TokenInfo,en as TokenInfoQuery,nn as TokenMintTransaction,W as TokenNftAllowance,an as TokenNftInfo,sn as TokenNftInfoQuery,rn as TokenPauseTransaction,on as TokenRevokeKycTransaction,cn as TokenSupplyType,un as TokenType,ln as TokenUnfreezeTransaction,hn as TokenUnpauseTransaction,dn as TokenUpdateTransaction,fn as TokenWipeTransaction,mn as TopicCreateTransaction,_n as TopicDeleteTransaction,at as TopicId,gn as TopicInfo,bn as TopicInfoQuery,x as TopicMessage,H as TopicMessageChunk,Tt as TopicMessageQuery,yn as TopicMessageSubmitTransaction,wn as TopicUpdateTransaction,G as Transaction,N as TransactionFeeSchedule,D as TransactionId,Tn as TransactionReceipt,An as TransactionReceiptQuery,kn as TransactionRecord,Sn as TransactionRecordQuery,pn as TransactionResponse,In as Transfer,xn as TransferTransaction,M as Wallet};
